(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (make-leaf value)
  (make-tree value '() '()))
(define (empty-tree? tree) (null? tree))
(define (set-left-branch! tree branch)
  (set-car! (cdr tree) branch))
(define (set-right-branch! tree branch)
  (set-car! (cddr tree) branch))

(define (make-table <?)
  (let ((local-table '()))
    (define (assoc key records)
      (cond ((null? records) #f)
            ((equal? key (car (entry records)))
             (entry records))
            ((<? key (car (entry records)))
             (assoc key (left-branch records)))
            (else (assoc key (right-branch records)))))

    (define (lookup key)
      (let ((record (assoc key local-table)))
        (if record
          (cdr record)
          #f)))

    (define (insert-binary-tree! key value tree)
      (cond ((equal? key (car (entry tree)))
             (set-cdr! (entry tree) value))
            ((<? key (car (entry tree)))
             (if (empty-tree? (left-branch tree))
               (set-left-branch! tree (make-leaf (cons key value)))
               (insert-binary-tree! key value (left-branch tree))))
            (else
              (if (empty-tree? (right-branch tree))
                (set-right-branch! tree (make-leaf (cons key value)))
                (insert-binary-tree! key value (right-branch tree))))))

    (define (insert! key value)
      (if (empty-tree? local-table)
        (set! local-table (make-leaf (cons key value)))
        (insert-binary-tree! key value local-table))
      'ok)

    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

; For testing
(define table (make-table <))
(define get (table 'lookup-proc))
(define put (table 'insert-proc!))
