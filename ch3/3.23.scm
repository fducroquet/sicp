(define (make-deque) (cons '() '()))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (make-elt value prev next)
  (cons (cons value prev) next))
(define (value elt) (caar elt))
(define (prev elt) (cdar elt))
(define (next elt) (cdr elt))
(define (set-prev! elt item) (set-cdr! (car elt) item))
(define (set-next! elt item) (set-cdr! elt item))

(define (empty-deque? deque) (null? (front-ptr deque)))

(define (contents deque)
  (define (contents-helper front)
    (if (null? front)
      '()
      (cons (value front)
            (contents-helper (next front)))))
  (contents-helper (front-ptr deque)))

(define (front-deque deque)
  (if (empty-deque? deque)
    (error "FRONT called with an empty deque" (contents deque))
    (value (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "REAR called with an empty deque" (contents deque))
    (value (rear-ptr deque))))

(define (insert-deque! deque item pos)
  (cond ((empty-deque? deque)
         (let ((new-pair (make-elt item '() '())))
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           (contents deque)))
        ((eq? pos 'front)
         (let ((new-pair (make-elt item '() (front-ptr deque))))
           (set-prev! (front-ptr deque) new-pair)
           (set-front-ptr! deque new-pair)
           (contents deque)))
        ((eq? pos 'rear)
         (let ((new-pair (make-elt item (rear-ptr deque) '())))
           (set-next! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           (contents deque)))))

(define (front-insert-deque! deque item)
  (insert-deque! deque item 'front))

(define (rear-insert-deque! deque item)
  (insert-deque! deque item 'rear))

(define (delete-deque! deque pos)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" (contents deque)))
        ((eq? pos 'front)
         (set-front-ptr! deque (next (front-ptr deque)))
         (if (empty-deque? deque)
           (set-rear-ptr! deque '())
           (set-prev! (front-ptr deque) '()))
         (contents deque))
        ((eq? pos 'rear)
         (set-rear-ptr! deque (prev (rear-ptr deque)))
         (if (null? (rear-ptr deque))
           (set-front-ptr! deque '())
           (set-next! (rear-ptr deque) '()))
         (contents deque))))

(define (front-delete-deque! deque)
  (delete-deque! deque 'front))

(define (rear-delete-deque! deque)
  (delete-deque! deque 'rear))
