(run-in-interpreter
  '(define (map f l)
     (if (null? l)
       '()
       (cons (f (car l)) (map f (cdr l)))))

  '(define (for-each f l)
     (if (not (null? l))
       (begin
         (f (car l))
         (for-each f (cdr l))))))

(run-in-interpreter
  '(define (names)
     (define (daughter l) (car l))
     (define (boat l) (cadr l))
     (define names (list 'Mary-Ann 'Gabrielle 'Lorna 'Rosalind 'Melissa))
     ; First element = daughter’s name, second element = boat’s name
     (let ((barnacle (list (an-element-of names) (an-element-of names))))
       (require (eq? (boat barnacle) 'Gabrielle))
       (require (eq? (daughter barnacle) 'Melissa))
       (require (distinct? barnacle))
       (let ((moore (list (an-element-of names) (an-element-of names))))
         (require (eq? (daughter moore) 'Mary-Ann))
         (require (eq? (boat moore) 'Lorna))
         (require (distinct? moore))
         (let ((hall (list (an-element-of names) (an-element-of names))))
           (require (eq? (boat hall) 'Rosalind))
           (require (distinct? hall))
           (let ((downing (list (an-element-of names) (an-element-of names))))
             (require (eq? (boat downing) 'Melissa))
             (require (distinct? downing))
             (let ((parker (list (an-element-of names) (an-element-of names))))
               (require (distinct? parker))
               (let ((fathers (list moore downing hall barnacle parker)))
                 (require (distinct? (map daughter fathers)))
                 (require (distinct? (map boat fathers)))
                 (for-each (lambda (father)
                             (require (or (not (eq? (daughter father) 'Gabrielle))
                                          (eq? (daughter parker) (boat father)))))
                           fathers))
               (list (list 'Moore moore)
                     (list 'Downing downing)
                     (list 'Hall hall)
                     (list 'Barnacle barnacle)
                     (list 'Parker parker)))))))))
