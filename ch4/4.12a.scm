(define (traverse-env env var var-found-action . null-action)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (if (null? null-action)
               (env-loop (enclosing-environment env))
               ((car null-action) env)))
            ((eq? var (car vars))
             (var-found-action vals))
            (else (scan (cdr vars)
                        (cdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (set-vals-car! val)
  (lambda (vals)
    (set-car! vals val)))

(define (lookup-variable-value var env)
  (traverse-env env var car))

(define (set-variable-value! var val env)
  (traverse-env env var (set-vals-car! val)))

(define (define-variable! var val env)
  (traverse-env env var (set-vals-car! val)
                (lambda (env)
                  (add-binding-to-frame! var val (first-frame env)))))
