(define (multiple-dwelling)
  (filter (lambda (l)
            (let ((baker (list-ref l 0))
                  (cooper (list-ref l 1))
                  (fletcher (list-ref l 2))
                  (miller (list-ref l 3))
                  (smith (list-ref l 4)))
              (and (not (= baker 5))
                   (not (= cooper 1))
                   (not (= fletcher 5))
                   (not (= fletcher 1))
                   (> miller cooper)
                   (not (= (abs (- smith fletcher)) 1))
                   (not (= (abs (- fletcher cooper)) 1)))))
          (permutations '(1 2 3 4 5))))

(define (permutations s)
  (define (insert-elt-all-pos ps elt)
    (if (null? ps)
      (list (list elt))
      (cons (cons elt ps)
            (map (lambda (l) (cons (car ps) l))
                 (insert-elt-all-pos (cdr ps) elt)))))
  (if (null? s)
    (list '())
    (flatmap (lambda (ps) (insert-elt-all-pos ps (car s)))
             (permutations (cdr s)))))
