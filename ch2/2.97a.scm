(define (reduce-terms n d)
  (let* ((gcd-frac (gcd-terms n d))
         (o2 (degree-terms gcd-frac))
         (o1 (max (degree-terms n)
                  (degree-terms d)))
         (c (get-coeff-by-degree-terms gcd-frac o2))
         (mul-term (make-term 0 (expt c (+ 1 (- o1 o2)))))
         (n1 (quotient-terms (mul-term-by-all-terms mul-term n)
                             gcd-frac))
         (d1 (quotient-terms (mul-term-by-all-terms mul-term d)
                             gcd-frac)))
    (list (divide-terms-by-int n1 (gcd-terms-coeffs n1))
          (divide-terms-by-int d1 (gcd-terms-coeffs d1)))))

(define (quotient-terms n d)
  (car (div-terms n d)))

(define (reduce-poly p q)
  (if (same-variable? (variable p) (variable q))
    (map (lambda (term-list)
           (make-poly (variable p) term-list))
         (reduce-terms (term-list p) (term-list q)))
    (error "Polys not in same var -- REDUCE-POLY"
           (list p q))))
