(define (install-deriv-exp)
  (define (base operands) (car operands))
  (define (exponent operands) (cadr operands))
  (define (deriv operands var)
    (let ((u (base operands))
          (n (exponent operands)))
    (make-product (make-product n
                                (make-exponentiation u (- n 1)))
                  (deriv u var))))
  (put 'deriv '** deriv))
