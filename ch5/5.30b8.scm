(list 'car car (arity 1) (arg-type 0 pair?))
(list 'cadr cadr (arity 1) (arg-type 0 pair?) pair-cdr-arg)
(list 'cons cons (arity 2))
(list 'read read (arity 0))
(list 'append append (args-type list?))
(list 'pair? pair? (arity 1))
(list 'integer? integer? (arity 1))
(list 'symbol->string symbol->string (arity 1) (args-type symbol?))
(list 'string=? string=? (args-type string?))
(list 'substring substring (arity 3) (arg-type 0 string?) (arg-type 1 integer?)
      (arg-type 2 integer?) substring-range-check)
(list 'string->symbol string->symbol (arity 1) (arg-type 0 string?))
(list 'string-append string-append (args-type string?))
(list 'set-cdr! set-cdr! (arity 2) (arg-type 0 pair?))
(list 'eq? eq? (arity 2))
(list 'error error pos-arity)
(list 'null? null? (arity 1))
(list 'list list)
(list '* * (args-type number?))
(list '+ + (args-type number?))
(list '- - pos-arity (args-type number?))
(list '/ / pos-arity (args-type number?) check-div-by-0)
(list 'not not (arity 1))
(list '= = (args-type number?))
(list '< < (args-type real?))
(list '>= >= (args-type real?))
(list 'length length (arity 1) (args-type list?))
(list 'list-ref list-ref (arity 2) (arg-type 0 list?) (arg-type 1 integer?)
      list-ref-range-check)
(list 'member member (arity 2) (arg-type 1 list?))
(list 'remainder remainder (arity 2) (args-type integer?) divisor-not-null)
(list 'abs abs (arity 1) (arg-type 0 real?))
