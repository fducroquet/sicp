(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (instructions-list '())
        (instruction-count 0)
        (trace #f)
        (labels '())
        (entry-points '())
        (saved-regs '()))
    (let ((the-ops
            (list (list 'initialize-stack
                        (lambda () (stack 'initialize)))
                  (list 'print-stack-statistics
                        (lambda () (stack 'print-statistics)))))
          (register-table
            (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
          (error "Multiply defined register: " name)
          (set! register-table
            (cons (list name (make-register name))
                  register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
            (cadr val)
            (error "Unknown register: " name))))
      (define (execute check-breakpoint)
        (let ((insts (get-contents pc)))
          (if (null? insts)
            'done
            (let ((next (car insts)))
              (if (and check-breakpoint (breakpoint? next))
                (break next)
                (begin
                  (set! instruction-count (+ 1 instruction-count))
                  (if trace
                    (print-inst next))
                  ((instruction-execution-proc next))
                  (execute #t)))))))
      (define (add-entry-point reg-name)
        (set! entry-points
          (adjoin-set reg-name entry-points smaller?)))
      (define (add-saved-reg reg-name)
        (set! saved-regs
          (adjoin-set reg-name saved-regs smaller?)))
      (define (break inst)
        (let ((breakpoint (instruction-breakpoint inst)))
          (display "Breakpoint reached, label ")
          (display (breakpoint-label breakpoint))
          (display ", offset ")
          (display (breakpoint-offset breakpoint))
          (newline)))
      (define (get-breakpoint-instruction label n)
        (let ((label-target (lookup-label labels label)))
          (list-ref label-target (- n 1))))
      (define (set-breakpoint label n)
        (let ((breakpoint-inst (get-breakpoint-instruction label n)))
          (set-instruction-breakpoint! breakpoint-inst (make-breakpoint label n))))
      (define (cancel-breakpoint label n)
        (let ((breakpoint-inst (get-breakpoint-instruction label n)))
          (cancel-breakpoint! breakpoint-inst)))
      (define (cancel-all-breakpoints)
        (for-each cancel-breakpoint! the-instruction-sequence))
      (define (proceed)
        (execute #f))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute #t))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq)
                 (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register)
               allocate-register)
              ((eq? message 'get-register)
               lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops)
                 (set! the-ops (append ops the-ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'instructions-list) instructions-list)
              ((eq? message 'install-instructions-list)
               (lambda (insts)
                 (set! instructions-list insts)))
              ((eq? message 'add-entry-point) add-entry-point)
              ((eq? message 'entry-points) entry-points)
              ((eq? message 'add-saved-reg) add-saved-reg)
              ((eq? message 'saved-regs) saved-regs)
              ((eq? message 'print-and-reset-count)
               (display instruction-count)
               (newline)
               (set! instruction-count 0))
              ((eq? message 'trace-on)
               (set! trace #t))
              ((eq? message 'trace-off)
               (set! trace #f))
              ((eq? message 'set-labels!)
               (lambda (labels2)
                 (set! labels labels2)))
              ((eq? message 'set-breakpoint) set-breakpoint)
              ((eq? message 'proceed) (proceed))
              ((eq? message 'cancel-breakpoint) cancel-breakpoint)
              ((eq? message 'cancel-all-breakpoints) (cancel-all-breakpoints))
              (else (error "Unknown request: MACHINE" message))))
      dispatch)))

