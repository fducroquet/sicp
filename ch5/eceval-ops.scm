;; To define primitive operations for the ec-evaluator.
(define-macro (ecop op)
              `(list ',op ,op))

(define eceval-operations
  (list
    ;; Primitive Scheme operations.
    (ecop read)
    (ecop list)
    (ecop eq?)
    (ecop string-append)
    (ecop object->string)
    (ecop length)
    (ecop cons)
    (ecop reverse)
    (ecop =)
    (ecop <)
    (ecop >)
    (ecop <=)
    (ecop >=)
    (ecop +)
    (ecop -)
    (ecop *)
    (ecop /)

    ;; Syntax operations
    (ecop self-evaluating?)
    (ecop quoted?)
    (ecop text-of-quotation)
    (ecop variable?)
    (ecop assignment?)
    (ecop assignment-variable)
    (ecop assignment-value)
    (ecop definition?)
    (ecop definition-variable)
    (ecop definition-value)
    (ecop lambda?)
    (ecop lambda-parameters)
    (ecop lambda-body)
    (ecop if?)
    (ecop if-predicate)
    (ecop if-consequent)
    (ecop if-alternative)
    (ecop begin?)
    (ecop begin-actions)
    (ecop last-exp?)
    (ecop first-exp)
    (ecop rest-exps)
    (ecop application?)
    (ecop operator)
    (ecop operands)
    (ecop no-operands?)
    (ecop first-operand)
    (ecop rest-operands)
    (ecop cond?)
    (ecop and?)
    (ecop or?)
    (ecop let?)
    (ecop let*?)
    (ecop letrec?)
    (ecop while?)
    (ecop until?)
    (ecop for?)
    (ecop cond-clauses)
    (ecop cond-else-clause?)
    (ecop cond-predicate)
    (ecop cond-actions)
    (ecop no-more-clauses?)
    (ecop first-clause)
    (ecop rest-clauses)
    (ecop last-clause?)

    ; Syntax transformation procedures
    (ecop cond->if)
    (ecop and->if)
    (ecop or->if)
    (ecop let->combination)
    (ecop let*->nested-lets)
    (ecop letrec->let)
    (ecop while->if)
    (ecop until->while)
    (ecop for->let)

    ;; Other operations
    (ecop true?)
    (ecop false?)
    (ecop make-procedure)
    (ecop compound-procedure?)
    (ecop procedure-parameters)
    (ecop procedure-body)
    (ecop procedure-environment)
    (ecop compiled-procedure?)
    (ecop compiled-procedure-entry)
    (ecop compiled-procedure-env)
    (ecop make-compiled-procedure)
    (ecop extend-environment)
    (ecop lookup-variable-value)
    (ecop set-variable-value!)
    (ecop define-variable!)
    (ecop primitive-procedure?)
    (ecop apply-primitive-procedure)
    (ecop check-primitive-arguments)
    (ecop prompt-for-input)
    (ecop announce-output)
    (ecop user-print)
    (ecop empty-arglist)
    (ecop adjoin-arg)
    (ecop last-operand?)
    (ecop no-more-exps?)
    (ecop get-global-environment)
    (ecop compile-and-assemble)))
